/**
 * Symbol Layer
 *
 * See the [layer style specification](https://maplibre.org/maplibre-style-spec/layers/)
 */
declare const _default: import('vue').DefineComponent<{
    layerId: string;
    sourceLayer?: string | undefined;
    source?: string | undefined;
    before?: string | undefined;
    filter?: boolean | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | /*elided*/ any | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | ["!has", string] | [">", string, string | number | boolean] | [">=", string, string | number | boolean] | ["<", string, string | number | boolean] | ["<=", string, string | number | boolean] | ["in", string, ...(string | number | boolean)[]] | ["!in", string, ...(string | number | boolean)[]] | ["all", ...import('maplibre-gl').LegacyFilterSpecification[]] | ["any", ...import('maplibre-gl').LegacyFilterSpecification[]] | ["none", ...import('maplibre-gl').LegacyFilterSpecification[]] | undefined;
    minzoom?: number | undefined;
    maxzoom?: number | undefined;
    metadata?: unknown;
    layout?: {
        "symbol-placement"?: import('maplibre-gl').PropertyValueSpecification<"point" | "line" | "line-center">;
        "symbol-spacing"?: import('maplibre-gl').PropertyValueSpecification<number>;
        "symbol-avoid-edges"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "symbol-sort-key"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "symbol-z-order"?: import('maplibre-gl').PropertyValueSpecification<"auto" | "viewport-y" | "source">;
        "icon-allow-overlap"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "icon-overlap"?: import('maplibre-gl').PropertyValueSpecification<"never" | "always" | "cooperative">;
        "icon-ignore-placement"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "icon-optional"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "icon-rotation-alignment"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport" | "auto">;
        "icon-size"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-text-fit"?: import('maplibre-gl').PropertyValueSpecification<"none" | "width" | "height" | "both">;
        "icon-text-fit-padding"?: import('maplibre-gl').PropertyValueSpecification<[number, number, number, number]>;
        "icon-image"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ResolvedImageSpecification>;
        "icon-rotate"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-padding"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').PaddingSpecification>;
        "icon-keep-upright"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "icon-offset"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<[number, number]>;
        "icon-anchor"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
        "icon-pitch-alignment"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport" | "auto">;
        "text-pitch-alignment"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport" | "auto">;
        "text-rotation-alignment"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport" | "viewport-glyph" | "auto">;
        "text-field"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').FormattedSpecification>;
        "text-font"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<Array<string>>;
        "text-size"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-max-width"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-line-height"?: import('maplibre-gl').PropertyValueSpecification<number>;
        "text-letter-spacing"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-justify"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<"auto" | "left" | "center" | "right">;
        "text-radial-offset"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-variable-anchor"?: import('maplibre-gl').PropertyValueSpecification<Array<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">>;
        "text-variable-anchor-offset"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').VariableAnchorOffsetCollectionSpecification>;
        "text-anchor"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
        "text-max-angle"?: import('maplibre-gl').PropertyValueSpecification<number>;
        "text-writing-mode"?: import('maplibre-gl').PropertyValueSpecification<Array<"horizontal" | "vertical">>;
        "text-rotate"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-padding"?: import('maplibre-gl').PropertyValueSpecification<number>;
        "text-keep-upright"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "text-transform"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<"none" | "uppercase" | "lowercase">;
        "text-offset"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<[number, number]>;
        "text-allow-overlap"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "text-overlap"?: import('maplibre-gl').PropertyValueSpecification<"never" | "always" | "cooperative">;
        "text-ignore-placement"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "text-optional"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "visibility"?: "visible" | "none";
    } | undefined;
    paint?: {
        "icon-opacity"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-opacity-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-color"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ColorSpecification>;
        "icon-color-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-halo-color"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ColorSpecification>;
        "icon-halo-color-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-halo-width"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-halo-width-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-halo-blur"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-halo-blur-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-translate"?: import('maplibre-gl').PropertyValueSpecification<[number, number]>;
        "icon-translate-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-translate-anchor"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport">;
        "text-opacity"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-opacity-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-color"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ColorSpecification>;
        "text-color-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-halo-color"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ColorSpecification>;
        "text-halo-color-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-halo-width"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-halo-width-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-halo-blur"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-halo-blur-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-translate"?: import('maplibre-gl').PropertyValueSpecification<[number, number]>;
        "text-translate-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-translate-anchor"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport">;
    } | undefined;
}, (() => import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
    [key: string]: any;
}>) | undefined, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, (keyof import('maplibre-gl').MapLayerEventType)[], keyof import('maplibre-gl').MapLayerEventType, import('vue').PublicProps, Readonly<{
    layerId: string;
    sourceLayer?: string | undefined;
    source?: string | undefined;
    before?: string | undefined;
    filter?: boolean | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["interpolate", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | ["array", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", import('maplibre-gl').ExpressionSpecification] | ["array", "string" | "number" | "boolean", number, import('maplibre-gl').ExpressionSpecification] | ["boolean", unknown, ...unknown[]] | import('maplibre-gl').CollatorExpressionSpecification | ["format", ...(string | import('maplibre-gl').ExpressionSpecification | ["image", import('maplibre-gl').ExpressionSpecification] | {
        "font-scale"?: number | import('maplibre-gl').ExpressionSpecification;
        "text-font"?: import('maplibre-gl').ExpressionSpecification;
        "text-color"?: import('maplibre-gl').ColorSpecification | import('maplibre-gl').ExpressionSpecification;
        "vertical-align"?: "bottom" | "center" | "top";
    })[]] | ["image", string | import('maplibre-gl').ExpressionSpecification] | ["literal", unknown] | ["number", unknown, ...unknown[]] | ["number-format", number | import('maplibre-gl').ExpressionSpecification, {
        locale?: string | import('maplibre-gl').ExpressionSpecification;
        currency?: string | import('maplibre-gl').ExpressionSpecification;
        "min-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
        "max-fraction-digits"?: number | import('maplibre-gl').ExpressionSpecification;
    }] | ["object", unknown, ...unknown[]] | ["string", unknown, ...unknown[]] | ["to-boolean", unknown] | ["to-color", unknown, ...unknown[]] | ["to-number", unknown, ...unknown[]] | ["to-string", unknown] | ["typeof", unknown] | ["accumulated"] | ["feature-state", string | import('maplibre-gl').ExpressionSpecification] | ["geometry-type"] | ["id"] | ["line-progress"] | ["properties"] | ["at", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification] | ["get", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["global-state", string] | ["has", string | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').ExpressionSpecification | undefined)?] | ["in", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification] | ["index-of", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, string | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["length", string | import('maplibre-gl').ExpressionSpecification] | ["slice", string | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["!", boolean | import('maplibre-gl').ExpressionSpecification] | ["!=", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["<=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["==", import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | [">=", string | number | import('maplibre-gl').ExpressionSpecification, string | number | import('maplibre-gl').ExpressionSpecification, (import('maplibre-gl').CollatorExpressionSpecification | undefined)?] | ["all", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["any", ...(boolean | import('maplibre-gl').ExpressionSpecification)[]] | ["case", boolean | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["coalesce", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["match", string | number | import('maplibre-gl').ExpressionSpecification, string | number | string[] | number[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null, ...(string[] | number[] | import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null)[], import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType | null] | ["within", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | /*elided*/ any | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | import('maplibre-gl').ProjectionDefinitionT | {
        type: "exponential";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    } | {
        type: "interval";
        stops: [number, import('maplibre-gl').ProjectionDefinitionT][];
    })[]] | ["interpolate-hcl", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["interpolate-lab", import('maplibre-gl').InterpolationSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(string | number | import('maplibre-gl').ExpressionSpecification)[]] | ["step", number | import('maplibre-gl').ExpressionSpecification, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["let", string, import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType, ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["var", string] | ["concat", ...(import('maplibre-gl').ExpressionSpecification | import('maplibre-gl').ExpressionInputType)[]] | ["downcase", string | import('maplibre-gl').ExpressionSpecification] | ["is-supported-script", string | import('maplibre-gl').ExpressionSpecification] | ["resolved-locale", import('maplibre-gl').CollatorExpressionSpecification] | ["upcase", string | import('maplibre-gl').ExpressionSpecification] | ["rgb", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["rgba", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["to-rgba", string | import('maplibre-gl').ExpressionSpecification] | ["-", number | import('maplibre-gl').ExpressionSpecification, (number | import('maplibre-gl').ExpressionSpecification | undefined)?] | ["*", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["/", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["%", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["^", number | import('maplibre-gl').ExpressionSpecification, number | import('maplibre-gl').ExpressionSpecification] | ["+", ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["abs", number | import('maplibre-gl').ExpressionSpecification] | ["acos", number | import('maplibre-gl').ExpressionSpecification] | ["asin", number | import('maplibre-gl').ExpressionSpecification] | ["atan", number | import('maplibre-gl').ExpressionSpecification] | ["ceil", number | import('maplibre-gl').ExpressionSpecification] | ["cos", number | import('maplibre-gl').ExpressionSpecification] | ["distance", import('geojson').GeoJSON<import('geojson').Geometry, import('geojson').GeoJsonProperties>] | ["e"] | ["floor", number | import('maplibre-gl').ExpressionSpecification] | ["ln", number | import('maplibre-gl').ExpressionSpecification] | ["ln2"] | ["log10", number | import('maplibre-gl').ExpressionSpecification] | ["log2", number | import('maplibre-gl').ExpressionSpecification] | ["max", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["min", number | import('maplibre-gl').ExpressionSpecification, ...(number | import('maplibre-gl').ExpressionSpecification)[]] | ["pi"] | ["round", number | import('maplibre-gl').ExpressionSpecification] | ["sin", number | import('maplibre-gl').ExpressionSpecification] | ["sqrt", number | import('maplibre-gl').ExpressionSpecification] | ["tan", number | import('maplibre-gl').ExpressionSpecification] | ["zoom"] | ["heatmap-density"] | ["elevation"] | ["!has", string] | [">", string, string | number | boolean] | [">=", string, string | number | boolean] | ["<", string, string | number | boolean] | ["<=", string, string | number | boolean] | ["in", string, ...(string | number | boolean)[]] | ["!in", string, ...(string | number | boolean)[]] | ["all", ...import('maplibre-gl').LegacyFilterSpecification[]] | ["any", ...import('maplibre-gl').LegacyFilterSpecification[]] | ["none", ...import('maplibre-gl').LegacyFilterSpecification[]] | undefined;
    minzoom?: number | undefined;
    maxzoom?: number | undefined;
    metadata?: unknown;
    layout?: {
        "symbol-placement"?: import('maplibre-gl').PropertyValueSpecification<"point" | "line" | "line-center">;
        "symbol-spacing"?: import('maplibre-gl').PropertyValueSpecification<number>;
        "symbol-avoid-edges"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "symbol-sort-key"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "symbol-z-order"?: import('maplibre-gl').PropertyValueSpecification<"auto" | "viewport-y" | "source">;
        "icon-allow-overlap"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "icon-overlap"?: import('maplibre-gl').PropertyValueSpecification<"never" | "always" | "cooperative">;
        "icon-ignore-placement"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "icon-optional"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "icon-rotation-alignment"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport" | "auto">;
        "icon-size"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-text-fit"?: import('maplibre-gl').PropertyValueSpecification<"none" | "width" | "height" | "both">;
        "icon-text-fit-padding"?: import('maplibre-gl').PropertyValueSpecification<[number, number, number, number]>;
        "icon-image"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ResolvedImageSpecification>;
        "icon-rotate"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-padding"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').PaddingSpecification>;
        "icon-keep-upright"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "icon-offset"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<[number, number]>;
        "icon-anchor"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
        "icon-pitch-alignment"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport" | "auto">;
        "text-pitch-alignment"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport" | "auto">;
        "text-rotation-alignment"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport" | "viewport-glyph" | "auto">;
        "text-field"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').FormattedSpecification>;
        "text-font"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<Array<string>>;
        "text-size"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-max-width"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-line-height"?: import('maplibre-gl').PropertyValueSpecification<number>;
        "text-letter-spacing"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-justify"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<"auto" | "left" | "center" | "right">;
        "text-radial-offset"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-variable-anchor"?: import('maplibre-gl').PropertyValueSpecification<Array<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">>;
        "text-variable-anchor-offset"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').VariableAnchorOffsetCollectionSpecification>;
        "text-anchor"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
        "text-max-angle"?: import('maplibre-gl').PropertyValueSpecification<number>;
        "text-writing-mode"?: import('maplibre-gl').PropertyValueSpecification<Array<"horizontal" | "vertical">>;
        "text-rotate"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-padding"?: import('maplibre-gl').PropertyValueSpecification<number>;
        "text-keep-upright"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "text-transform"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<"none" | "uppercase" | "lowercase">;
        "text-offset"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<[number, number]>;
        "text-allow-overlap"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "text-overlap"?: import('maplibre-gl').PropertyValueSpecification<"never" | "always" | "cooperative">;
        "text-ignore-placement"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "text-optional"?: import('maplibre-gl').PropertyValueSpecification<boolean>;
        "visibility"?: "visible" | "none";
    } | undefined;
    paint?: {
        "icon-opacity"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-opacity-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-color"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ColorSpecification>;
        "icon-color-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-halo-color"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ColorSpecification>;
        "icon-halo-color-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-halo-width"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-halo-width-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-halo-blur"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "icon-halo-blur-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-translate"?: import('maplibre-gl').PropertyValueSpecification<[number, number]>;
        "icon-translate-transition"?: import('maplibre-gl').TransitionSpecification;
        "icon-translate-anchor"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport">;
        "text-opacity"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-opacity-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-color"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ColorSpecification>;
        "text-color-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-halo-color"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<import('maplibre-gl').ColorSpecification>;
        "text-halo-color-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-halo-width"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-halo-width-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-halo-blur"?: import('maplibre-gl').DataDrivenPropertyValueSpecification<number>;
        "text-halo-blur-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-translate"?: import('maplibre-gl').PropertyValueSpecification<[number, number]>;
        "text-translate-transition"?: import('maplibre-gl').TransitionSpecification;
        "text-translate-anchor"?: import('maplibre-gl').PropertyValueSpecification<"map" | "viewport">;
    } | undefined;
}> & Readonly<{
    onTouchcancel?: ((...args: any[]) => any) | undefined;
    onTouchend?: ((...args: any[]) => any) | undefined;
    onTouchstart?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onContextmenu?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousemove?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseenter?: ((...args: any[]) => any) | undefined;
    onMouseleave?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
